// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scheduling.proto

package resScheduling

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SchedulingCGpuRequest struct {
	ProjectID            int64    `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	CgpuType             int64    `protobuf:"varint,2,opt,name=cgpuType,proto3" json:"cgpuType,omitempty"`
	NodesAfter           []int64  `protobuf:"varint,3,rep,packed,name=nodesAfter,proto3" json:"nodesAfter,omitempty"`
	CtrlID               int64    `protobuf:"varint,4,opt,name=ctrlID,proto3" json:"ctrlID,omitempty"`
	CtrlCN               string   `protobuf:"bytes,5,opt,name=ctrlCN,proto3" json:"ctrlCN,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchedulingCGpuRequest) Reset()         { *m = SchedulingCGpuRequest{} }
func (m *SchedulingCGpuRequest) String() string { return proto.CompactTextString(m) }
func (*SchedulingCGpuRequest) ProtoMessage()    {}
func (*SchedulingCGpuRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb732522b6cbe36, []int{0}
}

func (m *SchedulingCGpuRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulingCGpuRequest.Unmarshal(m, b)
}
func (m *SchedulingCGpuRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulingCGpuRequest.Marshal(b, m, deterministic)
}
func (m *SchedulingCGpuRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulingCGpuRequest.Merge(m, src)
}
func (m *SchedulingCGpuRequest) XXX_Size() int {
	return xxx_messageInfo_SchedulingCGpuRequest.Size(m)
}
func (m *SchedulingCGpuRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulingCGpuRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulingCGpuRequest proto.InternalMessageInfo

func (m *SchedulingCGpuRequest) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *SchedulingCGpuRequest) GetCgpuType() int64 {
	if m != nil {
		return m.CgpuType
	}
	return 0
}

func (m *SchedulingCGpuRequest) GetNodesAfter() []int64 {
	if m != nil {
		return m.NodesAfter
	}
	return nil
}

func (m *SchedulingCGpuRequest) GetCtrlID() int64 {
	if m != nil {
		return m.CtrlID
	}
	return 0
}

func (m *SchedulingCGpuRequest) GetCtrlCN() string {
	if m != nil {
		return m.CtrlCN
	}
	return ""
}

type SchedulingStorageRequest struct {
	ProjectID             int64    `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	StorageSizeAfter      int64    `protobuf:"varint,2,opt,name=storageSizeAfter,proto3" json:"storageSizeAfter,omitempty"`
	StorageAllocInfoAfter string   `protobuf:"bytes,3,opt,name=storageAllocInfoAfter,proto3" json:"storageAllocInfoAfter,omitempty"`
	CtrlID                int64    `protobuf:"varint,4,opt,name=ctrlID,proto3" json:"ctrlID,omitempty"`
	CtrlCN                string   `protobuf:"bytes,5,opt,name=ctrlCN,proto3" json:"ctrlCN,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *SchedulingStorageRequest) Reset()         { *m = SchedulingStorageRequest{} }
func (m *SchedulingStorageRequest) String() string { return proto.CompactTextString(m) }
func (*SchedulingStorageRequest) ProtoMessage()    {}
func (*SchedulingStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb732522b6cbe36, []int{1}
}

func (m *SchedulingStorageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulingStorageRequest.Unmarshal(m, b)
}
func (m *SchedulingStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulingStorageRequest.Marshal(b, m, deterministic)
}
func (m *SchedulingStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulingStorageRequest.Merge(m, src)
}
func (m *SchedulingStorageRequest) XXX_Size() int {
	return xxx_messageInfo_SchedulingStorageRequest.Size(m)
}
func (m *SchedulingStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulingStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulingStorageRequest proto.InternalMessageInfo

func (m *SchedulingStorageRequest) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *SchedulingStorageRequest) GetStorageSizeAfter() int64 {
	if m != nil {
		return m.StorageSizeAfter
	}
	return 0
}

func (m *SchedulingStorageRequest) GetStorageAllocInfoAfter() string {
	if m != nil {
		return m.StorageAllocInfoAfter
	}
	return ""
}

func (m *SchedulingStorageRequest) GetCtrlID() int64 {
	if m != nil {
		return m.CtrlID
	}
	return 0
}

func (m *SchedulingStorageRequest) GetCtrlCN() string {
	if m != nil {
		return m.CtrlCN
	}
	return ""
}

type SchedulingReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchedulingReply) Reset()         { *m = SchedulingReply{} }
func (m *SchedulingReply) String() string { return proto.CompactTextString(m) }
func (*SchedulingReply) ProtoMessage()    {}
func (*SchedulingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb732522b6cbe36, []int{2}
}

func (m *SchedulingReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulingReply.Unmarshal(m, b)
}
func (m *SchedulingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulingReply.Marshal(b, m, deterministic)
}
func (m *SchedulingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulingReply.Merge(m, src)
}
func (m *SchedulingReply) XXX_Size() int {
	return xxx_messageInfo_SchedulingReply.Size(m)
}
func (m *SchedulingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulingReply.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulingReply proto.InternalMessageInfo

///////////////////////////////////////////////////////////
type QueryTreeRequest struct {
	ProjectID            int64    `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	CgpuType             int64    `protobuf:"varint,2,opt,name=cgpuType,proto3" json:"cgpuType,omitempty"`
	QueryType            int64    `protobuf:"varint,3,opt,name=queryType,proto3" json:"queryType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryTreeRequest) Reset()         { *m = QueryTreeRequest{} }
func (m *QueryTreeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTreeRequest) ProtoMessage()    {}
func (*QueryTreeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb732522b6cbe36, []int{3}
}

func (m *QueryTreeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryTreeRequest.Unmarshal(m, b)
}
func (m *QueryTreeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryTreeRequest.Marshal(b, m, deterministic)
}
func (m *QueryTreeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTreeRequest.Merge(m, src)
}
func (m *QueryTreeRequest) XXX_Size() int {
	return xxx_messageInfo_QueryTreeRequest.Size(m)
}
func (m *QueryTreeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTreeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTreeRequest proto.InternalMessageInfo

func (m *QueryTreeRequest) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *QueryTreeRequest) GetCgpuType() int64 {
	if m != nil {
		return m.CgpuType
	}
	return 0
}

func (m *QueryTreeRequest) GetQueryType() int64 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

type QueryTreeReply struct {
	JsonTree             string   `protobuf:"bytes,1,opt,name=jsonTree,proto3" json:"jsonTree,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryTreeReply) Reset()         { *m = QueryTreeReply{} }
func (m *QueryTreeReply) String() string { return proto.CompactTextString(m) }
func (*QueryTreeReply) ProtoMessage()    {}
func (*QueryTreeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb732522b6cbe36, []int{4}
}

func (m *QueryTreeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryTreeReply.Unmarshal(m, b)
}
func (m *QueryTreeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryTreeReply.Marshal(b, m, deterministic)
}
func (m *QueryTreeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTreeReply.Merge(m, src)
}
func (m *QueryTreeReply) XXX_Size() int {
	return xxx_messageInfo_QueryTreeReply.Size(m)
}
func (m *QueryTreeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTreeReply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTreeReply proto.InternalMessageInfo

func (m *QueryTreeReply) GetJsonTree() string {
	if m != nil {
		return m.JsonTree
	}
	return ""
}

///////////////////////////////////////////////////////////
type QueryProjectResRequest struct {
	ProjectID            int64    `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryProjectResRequest) Reset()         { *m = QueryProjectResRequest{} }
func (m *QueryProjectResRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProjectResRequest) ProtoMessage()    {}
func (*QueryProjectResRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb732522b6cbe36, []int{5}
}

func (m *QueryProjectResRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryProjectResRequest.Unmarshal(m, b)
}
func (m *QueryProjectResRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryProjectResRequest.Marshal(b, m, deterministic)
}
func (m *QueryProjectResRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectResRequest.Merge(m, src)
}
func (m *QueryProjectResRequest) XXX_Size() int {
	return xxx_messageInfo_QueryProjectResRequest.Size(m)
}
func (m *QueryProjectResRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectResRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectResRequest proto.InternalMessageInfo

func (m *QueryProjectResRequest) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

type QueryProjectResReply struct {
	ProjectID            int64    `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	CpuNodesAcquired     int64    `protobuf:"varint,2,opt,name=cpuNodesAcquired,proto3" json:"cpuNodesAcquired,omitempty"`
	GpuNodesAcquired     int64    `protobuf:"varint,3,opt,name=gpuNodesAcquired,proto3" json:"gpuNodesAcquired,omitempty"`
	StorageSizeAcquired  int64    `protobuf:"varint,4,opt,name=storageSizeAcquired,proto3" json:"storageSizeAcquired,omitempty"`
	CpuNodesArray        []int64  `protobuf:"varint,5,rep,packed,name=cpuNodesArray,proto3" json:"cpuNodesArray,omitempty"`
	CpuNodesStr          string   `protobuf:"bytes,6,opt,name=cpuNodesStr,proto3" json:"cpuNodesStr,omitempty"`
	GpuNodesArray        []int64  `protobuf:"varint,7,rep,packed,name=gpuNodesArray,proto3" json:"gpuNodesArray,omitempty"`
	GpuNodesStr          string   `protobuf:"bytes,8,opt,name=gpuNodesStr,proto3" json:"gpuNodesStr,omitempty"`
	StorageAllocInfo     string   `protobuf:"bytes,9,opt,name=storageAllocInfo,proto3" json:"storageAllocInfo,omitempty"`
	CreatedAt            string   `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryProjectResReply) Reset()         { *m = QueryProjectResReply{} }
func (m *QueryProjectResReply) String() string { return proto.CompactTextString(m) }
func (*QueryProjectResReply) ProtoMessage()    {}
func (*QueryProjectResReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb732522b6cbe36, []int{6}
}

func (m *QueryProjectResReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryProjectResReply.Unmarshal(m, b)
}
func (m *QueryProjectResReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryProjectResReply.Marshal(b, m, deterministic)
}
func (m *QueryProjectResReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectResReply.Merge(m, src)
}
func (m *QueryProjectResReply) XXX_Size() int {
	return xxx_messageInfo_QueryProjectResReply.Size(m)
}
func (m *QueryProjectResReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectResReply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectResReply proto.InternalMessageInfo

func (m *QueryProjectResReply) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *QueryProjectResReply) GetCpuNodesAcquired() int64 {
	if m != nil {
		return m.CpuNodesAcquired
	}
	return 0
}

func (m *QueryProjectResReply) GetGpuNodesAcquired() int64 {
	if m != nil {
		return m.GpuNodesAcquired
	}
	return 0
}

func (m *QueryProjectResReply) GetStorageSizeAcquired() int64 {
	if m != nil {
		return m.StorageSizeAcquired
	}
	return 0
}

func (m *QueryProjectResReply) GetCpuNodesArray() []int64 {
	if m != nil {
		return m.CpuNodesArray
	}
	return nil
}

func (m *QueryProjectResReply) GetCpuNodesStr() string {
	if m != nil {
		return m.CpuNodesStr
	}
	return ""
}

func (m *QueryProjectResReply) GetGpuNodesArray() []int64 {
	if m != nil {
		return m.GpuNodesArray
	}
	return nil
}

func (m *QueryProjectResReply) GetGpuNodesStr() string {
	if m != nil {
		return m.GpuNodesStr
	}
	return ""
}

func (m *QueryProjectResReply) GetStorageAllocInfo() string {
	if m != nil {
		return m.StorageAllocInfo
	}
	return ""
}

func (m *QueryProjectResReply) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *QueryProjectResReply) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func init() {
	proto.RegisterType((*SchedulingCGpuRequest)(nil), "resScheduling.SchedulingCGpuRequest")
	proto.RegisterType((*SchedulingStorageRequest)(nil), "resScheduling.SchedulingStorageRequest")
	proto.RegisterType((*SchedulingReply)(nil), "resScheduling.SchedulingReply")
	proto.RegisterType((*QueryTreeRequest)(nil), "resScheduling.QueryTreeRequest")
	proto.RegisterType((*QueryTreeReply)(nil), "resScheduling.QueryTreeReply")
	proto.RegisterType((*QueryProjectResRequest)(nil), "resScheduling.QueryProjectResRequest")
	proto.RegisterType((*QueryProjectResReply)(nil), "resScheduling.QueryProjectResReply")
}

func init() { proto.RegisterFile("scheduling.proto", fileDescriptor_9cb732522b6cbe36) }

var fileDescriptor_9cb732522b6cbe36 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x35, 0x0d, 0xf5, 0x54, 0x69, 0xd3, 0x85, 0x56, 0xab, 0xa8, 0x94, 0xc8, 0x14, 0x11,
	0x21, 0x14, 0x21, 0x40, 0xdc, 0xa3, 0x56, 0x42, 0xb9, 0x54, 0xd4, 0xe9, 0x81, 0x13, 0x28, 0xd8,
	0x53, 0x93, 0xc8, 0x8a, 0x37, 0xeb, 0xdd, 0x83, 0x79, 0x1b, 0x5e, 0x82, 0x87, 0xe0, 0x91, 0x38,
	0xa1, 0xdd, 0x8d, 0xff, 0x1d, 0x25, 0x88, 0xe3, 0x7c, 0xf3, 0xcd, 0x37, 0xb3, 0xbb, 0xdf, 0x0e,
	0xf4, 0x12, 0xff, 0x3b, 0x06, 0x32, 0x9a, 0x2f, 0xc3, 0x11, 0xe3, 0xb1, 0x88, 0x49, 0x97, 0x63,
	0x32, 0xcd, 0x41, 0xf7, 0xa7, 0x05, 0xa7, 0x45, 0x78, 0xf5, 0x91, 0x49, 0x0f, 0x57, 0x12, 0x13,
	0x41, 0xce, 0xc1, 0x61, 0x3c, 0x5e, 0xa0, 0x2f, 0x26, 0xd7, 0xd4, 0x1a, 0x58, 0x43, 0xdb, 0x2b,
	0x00, 0xd2, 0x87, 0x03, 0x3f, 0x64, 0xf2, 0x2e, 0x65, 0x48, 0xf7, 0x74, 0x32, 0x8f, 0xc9, 0x05,
	0xc0, 0x32, 0x0e, 0x30, 0x19, 0xdf, 0x0b, 0xe4, 0xd4, 0x1e, 0xd8, 0x43, 0xdb, 0x2b, 0x21, 0xe4,
	0x0c, 0x3a, 0xbe, 0xe0, 0xd1, 0xe4, 0x9a, 0x3e, 0xd4, 0x95, 0xeb, 0x28, 0xc3, 0xaf, 0x6e, 0xe8,
	0xfe, 0xc0, 0x1a, 0x3a, 0xde, 0x3a, 0x72, 0x7f, 0x5b, 0x40, 0x8b, 0x19, 0xa7, 0x22, 0xe6, 0xb3,
	0x10, 0x77, 0x1b, 0xf3, 0x15, 0xf4, 0x12, 0xc3, 0x9f, 0xce, 0x7f, 0xa0, 0x19, 0xc8, 0x8c, 0xdb,
	0xc0, 0xc9, 0x7b, 0x38, 0x5d, 0x63, 0xe3, 0x28, 0x8a, 0xfd, 0xc9, 0xf2, 0x3e, 0xce, 0x4e, 0xa0,
	0xa6, 0x69, 0x4f, 0xfe, 0xf3, 0x61, 0x4e, 0xe0, 0xb8, 0x38, 0x8b, 0x87, 0x2c, 0x4a, 0xdd, 0x05,
	0xf4, 0x6e, 0x25, 0xf2, 0xf4, 0x8e, 0x23, 0xfe, 0xff, 0xed, 0x9f, 0x83, 0xb3, 0xd2, 0x6a, 0x2a,
	0x69, 0x9b, 0xca, 0x1c, 0x70, 0x5f, 0xc3, 0x51, 0xa9, 0x17, 0x8b, 0x52, 0xa5, 0xb5, 0x48, 0xe2,
	0xa5, 0x02, 0x74, 0x23, 0xc7, 0xcb, 0x63, 0xf7, 0x03, 0x9c, 0x69, 0xf6, 0x27, 0xd3, 0xd9, 0xc3,
	0x64, 0xa7, 0xf9, 0xdc, 0x5f, 0x36, 0x3c, 0x69, 0x14, 0xaa, 0x66, 0x5b, 0x5f, 0xcb, 0x67, 0xf2,
	0x46, 0x3b, 0xc5, 0x5f, 0xc9, 0x39, 0xc7, 0x20, 0x7b, 0xad, 0x3a, 0xae, 0xb8, 0x61, 0x9d, 0x6b,
	0x4e, 0xdb, 0xc0, 0xc9, 0x1b, 0x78, 0x5c, 0x7e, 0xed, 0x8c, 0x6e, 0x1e, 0xac, 0x2d, 0x45, 0x2e,
	0xa1, 0x9b, 0x77, 0xe4, 0x7c, 0x96, 0xd2, 0x7d, 0xed, 0xe2, 0x2a, 0x48, 0x06, 0x70, 0x98, 0x01,
	0x53, 0xc1, 0x69, 0x47, 0xdf, 0x5e, 0x19, 0x52, 0x3a, 0x61, 0x45, 0xe7, 0x91, 0xd1, 0x09, 0xeb,
	0x3a, 0x61, 0x49, 0xe7, 0xc0, 0xe8, 0x94, 0xa0, 0x92, 0x8f, 0x73, 0xfb, 0x51, 0x47, 0xd3, 0x1a,
	0xb8, 0xba, 0x63, 0x9f, 0xe3, 0x4c, 0x60, 0x30, 0x16, 0x14, 0x34, 0xa9, 0x00, 0x54, 0x56, 0xb2,
	0x60, 0x9d, 0x3d, 0x34, 0xd9, 0x1c, 0x78, 0xfb, 0x67, 0x0f, 0xa0, 0xb0, 0x27, 0xf9, 0x0c, 0x47,
	0xd5, 0xe5, 0x40, 0x2e, 0x47, 0x95, 0xfd, 0x31, 0x6a, 0xdd, 0x1d, 0xfd, 0x8b, 0x8d, 0x2c, 0xe3,
	0xf8, 0x07, 0xe4, 0x0b, 0x9c, 0x34, 0xbe, 0x34, 0x79, 0xb9, 0xb1, 0xac, 0xfa, 0xe9, 0x77, 0xd0,
	0xbf, 0x85, 0xae, 0x36, 0xa0, 0x9a, 0x4a, 0x59, 0x99, 0x3c, 0xab, 0x95, 0xd4, 0x7f, 0x5c, 0xff,
	0xe9, 0x66, 0x82, 0x91, 0xfc, 0x0a, 0xc7, 0x35, 0x4f, 0x93, 0x17, 0x6d, 0x35, 0x8d, 0xcf, 0xd2,
	0x7f, 0xbe, 0x8d, 0xa6, 0x1b, 0x7c, 0xeb, 0xe8, 0x0d, 0xfd, 0xee, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x40, 0x33, 0xfd, 0x6e, 0xb5, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchedulingClient is the client API for Scheduling service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulingClient interface {
	// Scheduling Resource
	SchedulingCGpu(ctx context.Context, in *SchedulingCGpuRequest, opts ...grpc.CallOption) (*SchedulingReply, error)
	SchedulingStorage(ctx context.Context, in *SchedulingStorageRequest, opts ...grpc.CallOption) (*SchedulingReply, error)
	// Query Resource Tree
	QueryCGpuTree(ctx context.Context, in *QueryTreeRequest, opts ...grpc.CallOption) (*QueryTreeReply, error)
	// Query Project Resource
	QueryProjectRes(ctx context.Context, in *QueryProjectResRequest, opts ...grpc.CallOption) (*QueryProjectResReply, error)
}

type schedulingClient struct {
	cc *grpc.ClientConn
}

func NewSchedulingClient(cc *grpc.ClientConn) SchedulingClient {
	return &schedulingClient{cc}
}

func (c *schedulingClient) SchedulingCGpu(ctx context.Context, in *SchedulingCGpuRequest, opts ...grpc.CallOption) (*SchedulingReply, error) {
	out := new(SchedulingReply)
	err := c.cc.Invoke(ctx, "/resScheduling.Scheduling/SchedulingCGpu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingClient) SchedulingStorage(ctx context.Context, in *SchedulingStorageRequest, opts ...grpc.CallOption) (*SchedulingReply, error) {
	out := new(SchedulingReply)
	err := c.cc.Invoke(ctx, "/resScheduling.Scheduling/SchedulingStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingClient) QueryCGpuTree(ctx context.Context, in *QueryTreeRequest, opts ...grpc.CallOption) (*QueryTreeReply, error) {
	out := new(QueryTreeReply)
	err := c.cc.Invoke(ctx, "/resScheduling.Scheduling/QueryCGpuTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingClient) QueryProjectRes(ctx context.Context, in *QueryProjectResRequest, opts ...grpc.CallOption) (*QueryProjectResReply, error) {
	out := new(QueryProjectResReply)
	err := c.cc.Invoke(ctx, "/resScheduling.Scheduling/QueryProjectRes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulingServer is the server API for Scheduling service.
type SchedulingServer interface {
	// Scheduling Resource
	SchedulingCGpu(context.Context, *SchedulingCGpuRequest) (*SchedulingReply, error)
	SchedulingStorage(context.Context, *SchedulingStorageRequest) (*SchedulingReply, error)
	// Query Resource Tree
	QueryCGpuTree(context.Context, *QueryTreeRequest) (*QueryTreeReply, error)
	// Query Project Resource
	QueryProjectRes(context.Context, *QueryProjectResRequest) (*QueryProjectResReply, error)
}

// UnimplementedSchedulingServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulingServer struct {
}

func (*UnimplementedSchedulingServer) SchedulingCGpu(ctx context.Context, req *SchedulingCGpuRequest) (*SchedulingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulingCGpu not implemented")
}
func (*UnimplementedSchedulingServer) SchedulingStorage(ctx context.Context, req *SchedulingStorageRequest) (*SchedulingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulingStorage not implemented")
}
func (*UnimplementedSchedulingServer) QueryCGpuTree(ctx context.Context, req *QueryTreeRequest) (*QueryTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCGpuTree not implemented")
}
func (*UnimplementedSchedulingServer) QueryProjectRes(ctx context.Context, req *QueryProjectResRequest) (*QueryProjectResReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProjectRes not implemented")
}

func RegisterSchedulingServer(s *grpc.Server, srv SchedulingServer) {
	s.RegisterService(&_Scheduling_serviceDesc, srv)
}

func _Scheduling_SchedulingCGpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulingCGpuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServer).SchedulingCGpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resScheduling.Scheduling/SchedulingCGpu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServer).SchedulingCGpu(ctx, req.(*SchedulingCGpuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduling_SchedulingStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulingStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServer).SchedulingStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resScheduling.Scheduling/SchedulingStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServer).SchedulingStorage(ctx, req.(*SchedulingStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduling_QueryCGpuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServer).QueryCGpuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resScheduling.Scheduling/QueryCGpuTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServer).QueryCGpuTree(ctx, req.(*QueryTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduling_QueryProjectRes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectResRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServer).QueryProjectRes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resScheduling.Scheduling/QueryProjectRes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServer).QueryProjectRes(ctx, req.(*QueryProjectResRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduling_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resScheduling.Scheduling",
	HandlerType: (*SchedulingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SchedulingCGpu",
			Handler:    _Scheduling_SchedulingCGpu_Handler,
		},
		{
			MethodName: "SchedulingStorage",
			Handler:    _Scheduling_SchedulingStorage_Handler,
		},
		{
			MethodName: "QueryCGpuTree",
			Handler:    _Scheduling_QueryCGpuTree_Handler,
		},
		{
			MethodName: "QueryProjectRes",
			Handler:    _Scheduling_QueryProjectRes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduling.proto",
}
