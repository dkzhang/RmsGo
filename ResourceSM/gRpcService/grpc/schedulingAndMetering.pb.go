// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schedulingAndMetering.proto

package grpcSchMet

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SchedulingCGpuRequest struct {
	ProjectID            int64    `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	CgpuType             int64    `protobuf:"varint,2,opt,name=cgpuType,proto3" json:"cgpuType,omitempty"`
	NodesAfter           []int64  `protobuf:"varint,3,rep,packed,name=nodesAfter,proto3" json:"nodesAfter,omitempty"`
	CtrlID               int64    `protobuf:"varint,4,opt,name=ctrlID,proto3" json:"ctrlID,omitempty"`
	CtrlCN               string   `protobuf:"bytes,5,opt,name=ctrlCN,proto3" json:"ctrlCN,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchedulingCGpuRequest) Reset()         { *m = SchedulingCGpuRequest{} }
func (m *SchedulingCGpuRequest) String() string { return proto.CompactTextString(m) }
func (*SchedulingCGpuRequest) ProtoMessage()    {}
func (*SchedulingCGpuRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1900065f61297778, []int{0}
}

func (m *SchedulingCGpuRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulingCGpuRequest.Unmarshal(m, b)
}
func (m *SchedulingCGpuRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulingCGpuRequest.Marshal(b, m, deterministic)
}
func (m *SchedulingCGpuRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulingCGpuRequest.Merge(m, src)
}
func (m *SchedulingCGpuRequest) XXX_Size() int {
	return xxx_messageInfo_SchedulingCGpuRequest.Size(m)
}
func (m *SchedulingCGpuRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulingCGpuRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulingCGpuRequest proto.InternalMessageInfo

func (m *SchedulingCGpuRequest) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *SchedulingCGpuRequest) GetCgpuType() int64 {
	if m != nil {
		return m.CgpuType
	}
	return 0
}

func (m *SchedulingCGpuRequest) GetNodesAfter() []int64 {
	if m != nil {
		return m.NodesAfter
	}
	return nil
}

func (m *SchedulingCGpuRequest) GetCtrlID() int64 {
	if m != nil {
		return m.CtrlID
	}
	return 0
}

func (m *SchedulingCGpuRequest) GetCtrlCN() string {
	if m != nil {
		return m.CtrlCN
	}
	return ""
}

type SchedulingStorageRequest struct {
	ProjectID             int64    `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	StorageSizeAfter      int64    `protobuf:"varint,2,opt,name=storageSizeAfter,proto3" json:"storageSizeAfter,omitempty"`
	StorageAllocInfoAfter string   `protobuf:"bytes,3,opt,name=storageAllocInfoAfter,proto3" json:"storageAllocInfoAfter,omitempty"`
	CtrlID                int64    `protobuf:"varint,4,opt,name=ctrlID,proto3" json:"ctrlID,omitempty"`
	CtrlCN                string   `protobuf:"bytes,5,opt,name=ctrlCN,proto3" json:"ctrlCN,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *SchedulingStorageRequest) Reset()         { *m = SchedulingStorageRequest{} }
func (m *SchedulingStorageRequest) String() string { return proto.CompactTextString(m) }
func (*SchedulingStorageRequest) ProtoMessage()    {}
func (*SchedulingStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1900065f61297778, []int{1}
}

func (m *SchedulingStorageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulingStorageRequest.Unmarshal(m, b)
}
func (m *SchedulingStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulingStorageRequest.Marshal(b, m, deterministic)
}
func (m *SchedulingStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulingStorageRequest.Merge(m, src)
}
func (m *SchedulingStorageRequest) XXX_Size() int {
	return xxx_messageInfo_SchedulingStorageRequest.Size(m)
}
func (m *SchedulingStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulingStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulingStorageRequest proto.InternalMessageInfo

func (m *SchedulingStorageRequest) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *SchedulingStorageRequest) GetStorageSizeAfter() int64 {
	if m != nil {
		return m.StorageSizeAfter
	}
	return 0
}

func (m *SchedulingStorageRequest) GetStorageAllocInfoAfter() string {
	if m != nil {
		return m.StorageAllocInfoAfter
	}
	return ""
}

func (m *SchedulingStorageRequest) GetCtrlID() int64 {
	if m != nil {
		return m.CtrlID
	}
	return 0
}

func (m *SchedulingStorageRequest) GetCtrlCN() string {
	if m != nil {
		return m.CtrlCN
	}
	return ""
}

type SchedulingReply struct {
	ProjectID            int64    `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	CpuNodesAcquired     int64    `protobuf:"varint,2,opt,name=cpuNodesAcquired,proto3" json:"cpuNodesAcquired,omitempty"`
	GpuNodesAcquired     int64    `protobuf:"varint,3,opt,name=gpuNodesAcquired,proto3" json:"gpuNodesAcquired,omitempty"`
	StorageSizeAcquired  int64    `protobuf:"varint,4,opt,name=storageSizeAcquired,proto3" json:"storageSizeAcquired,omitempty"`
	Msg                  string   `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchedulingReply) Reset()         { *m = SchedulingReply{} }
func (m *SchedulingReply) String() string { return proto.CompactTextString(m) }
func (*SchedulingReply) ProtoMessage()    {}
func (*SchedulingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1900065f61297778, []int{2}
}

func (m *SchedulingReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulingReply.Unmarshal(m, b)
}
func (m *SchedulingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulingReply.Marshal(b, m, deterministic)
}
func (m *SchedulingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulingReply.Merge(m, src)
}
func (m *SchedulingReply) XXX_Size() int {
	return xxx_messageInfo_SchedulingReply.Size(m)
}
func (m *SchedulingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulingReply.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulingReply proto.InternalMessageInfo

func (m *SchedulingReply) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *SchedulingReply) GetCpuNodesAcquired() int64 {
	if m != nil {
		return m.CpuNodesAcquired
	}
	return 0
}

func (m *SchedulingReply) GetGpuNodesAcquired() int64 {
	if m != nil {
		return m.GpuNodesAcquired
	}
	return 0
}

func (m *SchedulingReply) GetStorageSizeAcquired() int64 {
	if m != nil {
		return m.StorageSizeAcquired
	}
	return 0
}

func (m *SchedulingReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

///////////////////////////////////////////////////////////
type QueryTreeRequest struct {
	ProjectID            int64    `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	CgpuType             int64    `protobuf:"varint,2,opt,name=cgpuType,proto3" json:"cgpuType,omitempty"`
	QueryType            int64    `protobuf:"varint,3,opt,name=queryType,proto3" json:"queryType,omitempty"`
	TreeFormat           int64    `protobuf:"varint,4,opt,name=treeFormat,proto3" json:"treeFormat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryTreeRequest) Reset()         { *m = QueryTreeRequest{} }
func (m *QueryTreeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTreeRequest) ProtoMessage()    {}
func (*QueryTreeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1900065f61297778, []int{3}
}

func (m *QueryTreeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryTreeRequest.Unmarshal(m, b)
}
func (m *QueryTreeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryTreeRequest.Marshal(b, m, deterministic)
}
func (m *QueryTreeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTreeRequest.Merge(m, src)
}
func (m *QueryTreeRequest) XXX_Size() int {
	return xxx_messageInfo_QueryTreeRequest.Size(m)
}
func (m *QueryTreeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTreeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTreeRequest proto.InternalMessageInfo

func (m *QueryTreeRequest) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *QueryTreeRequest) GetCgpuType() int64 {
	if m != nil {
		return m.CgpuType
	}
	return 0
}

func (m *QueryTreeRequest) GetQueryType() int64 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryTreeRequest) GetTreeFormat() int64 {
	if m != nil {
		return m.TreeFormat
	}
	return 0
}

type QueryTreeReply struct {
	JsonTree             string   `protobuf:"bytes,1,opt,name=jsonTree,proto3" json:"jsonTree,omitempty"`
	NodesNum             int64    `protobuf:"varint,2,opt,name=nodesNum,proto3" json:"nodesNum,omitempty"`
	Selected             []int64  `protobuf:"varint,3,rep,packed,name=selected,proto3" json:"selected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryTreeReply) Reset()         { *m = QueryTreeReply{} }
func (m *QueryTreeReply) String() string { return proto.CompactTextString(m) }
func (*QueryTreeReply) ProtoMessage()    {}
func (*QueryTreeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1900065f61297778, []int{4}
}

func (m *QueryTreeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryTreeReply.Unmarshal(m, b)
}
func (m *QueryTreeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryTreeReply.Marshal(b, m, deterministic)
}
func (m *QueryTreeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTreeReply.Merge(m, src)
}
func (m *QueryTreeReply) XXX_Size() int {
	return xxx_messageInfo_QueryTreeReply.Size(m)
}
func (m *QueryTreeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTreeReply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTreeReply proto.InternalMessageInfo

func (m *QueryTreeReply) GetJsonTree() string {
	if m != nil {
		return m.JsonTree
	}
	return ""
}

func (m *QueryTreeReply) GetNodesNum() int64 {
	if m != nil {
		return m.NodesNum
	}
	return 0
}

func (m *QueryTreeReply) GetSelected() []int64 {
	if m != nil {
		return m.Selected
	}
	return nil
}

///////////////////////////////////////////////////////////
type QueryProjectResRequest struct {
	ProjectID            int64    `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryProjectResRequest) Reset()         { *m = QueryProjectResRequest{} }
func (m *QueryProjectResRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProjectResRequest) ProtoMessage()    {}
func (*QueryProjectResRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1900065f61297778, []int{5}
}

func (m *QueryProjectResRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryProjectResRequest.Unmarshal(m, b)
}
func (m *QueryProjectResRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryProjectResRequest.Marshal(b, m, deterministic)
}
func (m *QueryProjectResRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectResRequest.Merge(m, src)
}
func (m *QueryProjectResRequest) XXX_Size() int {
	return xxx_messageInfo_QueryProjectResRequest.Size(m)
}
func (m *QueryProjectResRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectResRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectResRequest proto.InternalMessageInfo

func (m *QueryProjectResRequest) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

type QueryProjectResReply struct {
	ProjectID            int64    `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	CpuNodesAcquired     int64    `protobuf:"varint,2,opt,name=cpuNodesAcquired,proto3" json:"cpuNodesAcquired,omitempty"`
	GpuNodesAcquired     int64    `protobuf:"varint,3,opt,name=gpuNodesAcquired,proto3" json:"gpuNodesAcquired,omitempty"`
	StorageSizeAcquired  int64    `protobuf:"varint,4,opt,name=storageSizeAcquired,proto3" json:"storageSizeAcquired,omitempty"`
	CpuNodesArray        []int64  `protobuf:"varint,5,rep,packed,name=cpuNodesArray,proto3" json:"cpuNodesArray,omitempty"`
	CpuNodesStr          string   `protobuf:"bytes,6,opt,name=cpuNodesStr,proto3" json:"cpuNodesStr,omitempty"`
	GpuNodesArray        []int64  `protobuf:"varint,7,rep,packed,name=gpuNodesArray,proto3" json:"gpuNodesArray,omitempty"`
	GpuNodesStr          string   `protobuf:"bytes,8,opt,name=gpuNodesStr,proto3" json:"gpuNodesStr,omitempty"`
	StorageAllocInfo     string   `protobuf:"bytes,9,opt,name=storageAllocInfo,proto3" json:"storageAllocInfo,omitempty"`
	CreatedAt            string   `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryProjectResReply) Reset()         { *m = QueryProjectResReply{} }
func (m *QueryProjectResReply) String() string { return proto.CompactTextString(m) }
func (*QueryProjectResReply) ProtoMessage()    {}
func (*QueryProjectResReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1900065f61297778, []int{6}
}

func (m *QueryProjectResReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryProjectResReply.Unmarshal(m, b)
}
func (m *QueryProjectResReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryProjectResReply.Marshal(b, m, deterministic)
}
func (m *QueryProjectResReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectResReply.Merge(m, src)
}
func (m *QueryProjectResReply) XXX_Size() int {
	return xxx_messageInfo_QueryProjectResReply.Size(m)
}
func (m *QueryProjectResReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectResReply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectResReply proto.InternalMessageInfo

func (m *QueryProjectResReply) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *QueryProjectResReply) GetCpuNodesAcquired() int64 {
	if m != nil {
		return m.CpuNodesAcquired
	}
	return 0
}

func (m *QueryProjectResReply) GetGpuNodesAcquired() int64 {
	if m != nil {
		return m.GpuNodesAcquired
	}
	return 0
}

func (m *QueryProjectResReply) GetStorageSizeAcquired() int64 {
	if m != nil {
		return m.StorageSizeAcquired
	}
	return 0
}

func (m *QueryProjectResReply) GetCpuNodesArray() []int64 {
	if m != nil {
		return m.CpuNodesArray
	}
	return nil
}

func (m *QueryProjectResReply) GetCpuNodesStr() string {
	if m != nil {
		return m.CpuNodesStr
	}
	return ""
}

func (m *QueryProjectResReply) GetGpuNodesArray() []int64 {
	if m != nil {
		return m.GpuNodesArray
	}
	return nil
}

func (m *QueryProjectResReply) GetGpuNodesStr() string {
	if m != nil {
		return m.GpuNodesStr
	}
	return ""
}

func (m *QueryProjectResReply) GetStorageAllocInfo() string {
	if m != nil {
		return m.StorageAllocInfo
	}
	return ""
}

func (m *QueryProjectResReply) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *QueryProjectResReply) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type QueryProjectResLiteReply struct {
	ProjectID            int64    `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	CpuNodesAcquired     int64    `protobuf:"varint,2,opt,name=cpuNodesAcquired,proto3" json:"cpuNodesAcquired,omitempty"`
	GpuNodesAcquired     int64    `protobuf:"varint,3,opt,name=gpuNodesAcquired,proto3" json:"gpuNodesAcquired,omitempty"`
	StorageSizeAcquired  int64    `protobuf:"varint,4,opt,name=storageSizeAcquired,proto3" json:"storageSizeAcquired,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryProjectResLiteReply) Reset()         { *m = QueryProjectResLiteReply{} }
func (m *QueryProjectResLiteReply) String() string { return proto.CompactTextString(m) }
func (*QueryProjectResLiteReply) ProtoMessage()    {}
func (*QueryProjectResLiteReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1900065f61297778, []int{7}
}

func (m *QueryProjectResLiteReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryProjectResLiteReply.Unmarshal(m, b)
}
func (m *QueryProjectResLiteReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryProjectResLiteReply.Marshal(b, m, deterministic)
}
func (m *QueryProjectResLiteReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectResLiteReply.Merge(m, src)
}
func (m *QueryProjectResLiteReply) XXX_Size() int {
	return xxx_messageInfo_QueryProjectResLiteReply.Size(m)
}
func (m *QueryProjectResLiteReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectResLiteReply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectResLiteReply proto.InternalMessageInfo

func (m *QueryProjectResLiteReply) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *QueryProjectResLiteReply) GetCpuNodesAcquired() int64 {
	if m != nil {
		return m.CpuNodesAcquired
	}
	return 0
}

func (m *QueryProjectResLiteReply) GetGpuNodesAcquired() int64 {
	if m != nil {
		return m.GpuNodesAcquired
	}
	return 0
}

func (m *QueryProjectResLiteReply) GetStorageSizeAcquired() int64 {
	if m != nil {
		return m.StorageSizeAcquired
	}
	return 0
}

type QmRequest struct {
	ProjectID            int64    `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	MeteringType         int64    `protobuf:"varint,2,opt,name=meteringType,proto3" json:"meteringType,omitempty"`
	TypeInfo             string   `protobuf:"bytes,3,opt,name=typeInfo,proto3" json:"typeInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QmRequest) Reset()         { *m = QmRequest{} }
func (m *QmRequest) String() string { return proto.CompactTextString(m) }
func (*QmRequest) ProtoMessage()    {}
func (*QmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1900065f61297778, []int{8}
}

func (m *QmRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QmRequest.Unmarshal(m, b)
}
func (m *QmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QmRequest.Marshal(b, m, deterministic)
}
func (m *QmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QmRequest.Merge(m, src)
}
func (m *QmRequest) XXX_Size() int {
	return xxx_messageInfo_QmRequest.Size(m)
}
func (m *QmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QmRequest proto.InternalMessageInfo

func (m *QmRequest) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *QmRequest) GetMeteringType() int64 {
	if m != nil {
		return m.MeteringType
	}
	return 0
}

func (m *QmRequest) GetTypeInfo() string {
	if m != nil {
		return m.TypeInfo
	}
	return ""
}

type QmReply struct {
	ProjectID            int64    `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	MeteringType         int64    `protobuf:"varint,2,opt,name=meteringType,proto3" json:"meteringType,omitempty"`
	MeteringTypeInfo     string   `protobuf:"bytes,3,opt,name=MeteringTypeInfo,proto3" json:"MeteringTypeInfo,omitempty"`
	CpuAmountInDays      int64    `protobuf:"varint,4,opt,name=CpuAmountInDays,proto3" json:"CpuAmountInDays,omitempty"`
	GpuAmountInDays      int64    `protobuf:"varint,5,opt,name=GpuAmountInDays,proto3" json:"GpuAmountInDays,omitempty"`
	StorageAmountInDays  int64    `protobuf:"varint,6,opt,name=StorageAmountInDays,proto3" json:"StorageAmountInDays,omitempty"`
	CpuAmountInHours     int64    `protobuf:"varint,7,opt,name=CpuAmountInHours,proto3" json:"CpuAmountInHours,omitempty"`
	GpuAmountInHours     int64    `protobuf:"varint,8,opt,name=GpuAmountInHours,proto3" json:"GpuAmountInHours,omitempty"`
	StorageAmountInHours int64    `protobuf:"varint,9,opt,name=StorageAmountInHours,proto3" json:"StorageAmountInHours,omitempty"`
	CpuNodeMeteringJson  string   `protobuf:"bytes,10,opt,name=CpuNodeMeteringJson,proto3" json:"CpuNodeMeteringJson,omitempty"`
	GpuNodeMeteringJson  string   `protobuf:"bytes,11,opt,name=GpuNodeMeteringJson,proto3" json:"GpuNodeMeteringJson,omitempty"`
	StorageMeteringJson  string   `protobuf:"bytes,12,opt,name=StorageMeteringJson,proto3" json:"StorageMeteringJson,omitempty"`
	CreatedAt            string   `protobuf:"bytes,13,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QmReply) Reset()         { *m = QmReply{} }
func (m *QmReply) String() string { return proto.CompactTextString(m) }
func (*QmReply) ProtoMessage()    {}
func (*QmReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1900065f61297778, []int{9}
}

func (m *QmReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QmReply.Unmarshal(m, b)
}
func (m *QmReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QmReply.Marshal(b, m, deterministic)
}
func (m *QmReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QmReply.Merge(m, src)
}
func (m *QmReply) XXX_Size() int {
	return xxx_messageInfo_QmReply.Size(m)
}
func (m *QmReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QmReply.DiscardUnknown(m)
}

var xxx_messageInfo_QmReply proto.InternalMessageInfo

func (m *QmReply) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *QmReply) GetMeteringType() int64 {
	if m != nil {
		return m.MeteringType
	}
	return 0
}

func (m *QmReply) GetMeteringTypeInfo() string {
	if m != nil {
		return m.MeteringTypeInfo
	}
	return ""
}

func (m *QmReply) GetCpuAmountInDays() int64 {
	if m != nil {
		return m.CpuAmountInDays
	}
	return 0
}

func (m *QmReply) GetGpuAmountInDays() int64 {
	if m != nil {
		return m.GpuAmountInDays
	}
	return 0
}

func (m *QmReply) GetStorageAmountInDays() int64 {
	if m != nil {
		return m.StorageAmountInDays
	}
	return 0
}

func (m *QmReply) GetCpuAmountInHours() int64 {
	if m != nil {
		return m.CpuAmountInHours
	}
	return 0
}

func (m *QmReply) GetGpuAmountInHours() int64 {
	if m != nil {
		return m.GpuAmountInHours
	}
	return 0
}

func (m *QmReply) GetStorageAmountInHours() int64 {
	if m != nil {
		return m.StorageAmountInHours
	}
	return 0
}

func (m *QmReply) GetCpuNodeMeteringJson() string {
	if m != nil {
		return m.CpuNodeMeteringJson
	}
	return ""
}

func (m *QmReply) GetGpuNodeMeteringJson() string {
	if m != nil {
		return m.GpuNodeMeteringJson
	}
	return ""
}

func (m *QmReply) GetStorageMeteringJson() string {
	if m != nil {
		return m.StorageMeteringJson
	}
	return ""
}

func (m *QmReply) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

type RegCmtRequest struct {
	MeteringType         int64    `protobuf:"varint,1,opt,name=meteringType,proto3" json:"meteringType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegCmtRequest) Reset()         { *m = RegCmtRequest{} }
func (m *RegCmtRequest) String() string { return proto.CompactTextString(m) }
func (*RegCmtRequest) ProtoMessage()    {}
func (*RegCmtRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1900065f61297778, []int{10}
}

func (m *RegCmtRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegCmtRequest.Unmarshal(m, b)
}
func (m *RegCmtRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegCmtRequest.Marshal(b, m, deterministic)
}
func (m *RegCmtRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegCmtRequest.Merge(m, src)
}
func (m *RegCmtRequest) XXX_Size() int {
	return xxx_messageInfo_RegCmtRequest.Size(m)
}
func (m *RegCmtRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegCmtRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegCmtRequest proto.InternalMessageInfo

func (m *RegCmtRequest) GetMeteringType() int64 {
	if m != nil {
		return m.MeteringType
	}
	return 0
}

type RegCmtReply struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegCmtReply) Reset()         { *m = RegCmtReply{} }
func (m *RegCmtReply) String() string { return proto.CompactTextString(m) }
func (*RegCmtReply) ProtoMessage()    {}
func (*RegCmtReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1900065f61297778, []int{11}
}

func (m *RegCmtReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegCmtReply.Unmarshal(m, b)
}
func (m *RegCmtReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegCmtReply.Marshal(b, m, deterministic)
}
func (m *RegCmtReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegCmtReply.Merge(m, src)
}
func (m *RegCmtReply) XXX_Size() int {
	return xxx_messageInfo_RegCmtReply.Size(m)
}
func (m *RegCmtReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RegCmtReply.DiscardUnknown(m)
}

var xxx_messageInfo_RegCmtReply proto.InternalMessageInfo

func (m *RegCmtReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*SchedulingCGpuRequest)(nil), "grpcSchMet.SchedulingCGpuRequest")
	proto.RegisterType((*SchedulingStorageRequest)(nil), "grpcSchMet.SchedulingStorageRequest")
	proto.RegisterType((*SchedulingReply)(nil), "grpcSchMet.SchedulingReply")
	proto.RegisterType((*QueryTreeRequest)(nil), "grpcSchMet.QueryTreeRequest")
	proto.RegisterType((*QueryTreeReply)(nil), "grpcSchMet.QueryTreeReply")
	proto.RegisterType((*QueryProjectResRequest)(nil), "grpcSchMet.QueryProjectResRequest")
	proto.RegisterType((*QueryProjectResReply)(nil), "grpcSchMet.QueryProjectResReply")
	proto.RegisterType((*QueryProjectResLiteReply)(nil), "grpcSchMet.QueryProjectResLiteReply")
	proto.RegisterType((*QmRequest)(nil), "grpcSchMet.QmRequest")
	proto.RegisterType((*QmReply)(nil), "grpcSchMet.QmReply")
	proto.RegisterType((*RegCmtRequest)(nil), "grpcSchMet.RegCmtRequest")
	proto.RegisterType((*RegCmtReply)(nil), "grpcSchMet.RegCmtReply")
}

func init() { proto.RegisterFile("schedulingAndMetering.proto", fileDescriptor_1900065f61297778) }

var fileDescriptor_1900065f61297778 = []byte{
	// 860 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xcd, 0x6e, 0xeb, 0x44,
	0x14, 0xbe, 0xc6, 0xb7, 0x69, 0x72, 0x7a, 0x73, 0x13, 0xa6, 0xb7, 0xc5, 0xb8, 0x15, 0x04, 0xab,
	0x8b, 0xa8, 0x8b, 0x0a, 0xb5, 0x88, 0x1d, 0x42, 0x91, 0x2b, 0x42, 0x80, 0x56, 0xad, 0xd3, 0x05,
	0x2c, 0x83, 0x73, 0xea, 0xba, 0xc4, 0x3f, 0x1d, 0x8f, 0x91, 0xc2, 0x23, 0xf0, 0x16, 0xbc, 0x04,
	0x3b, 0x36, 0x2c, 0x81, 0xb7, 0xe0, 0x45, 0xd0, 0xcc, 0xd8, 0xce, 0x78, 0x62, 0xda, 0xc0, 0x5d,
	0x75, 0xe7, 0xf3, 0x9d, 0xef, 0xfc, 0xfa, 0x9c, 0x99, 0x81, 0x83, 0xcc, 0xbf, 0xc3, 0x79, 0xbe,
	0x08, 0xe3, 0x60, 0x14, 0xcf, 0x2f, 0x90, 0x21, 0x0d, 0xe3, 0xe0, 0x24, 0xa5, 0x09, 0x4b, 0x08,
	0x04, 0x34, 0xf5, 0xa7, 0xfe, 0xdd, 0x05, 0x32, 0xe7, 0x17, 0x03, 0xf6, 0xa6, 0x15, 0xd7, 0x1d,
	0xa7, 0xb9, 0x87, 0x0f, 0x39, 0x66, 0x8c, 0x1c, 0x42, 0x27, 0xa5, 0xc9, 0x3d, 0xfa, 0x6c, 0x72,
	0x6e, 0x19, 0x03, 0x63, 0x68, 0x7a, 0x2b, 0x80, 0xd8, 0xd0, 0xf6, 0x83, 0x34, 0xbf, 0x59, 0xa6,
	0x68, 0xbd, 0x23, 0x94, 0x95, 0x4c, 0x3e, 0x00, 0x88, 0x93, 0x39, 0x66, 0xa3, 0x5b, 0x86, 0xd4,
	0x32, 0x07, 0xe6, 0xd0, 0xf4, 0x14, 0x84, 0xec, 0x43, 0xcb, 0x67, 0x74, 0x31, 0x39, 0xb7, 0x5e,
	0x0a, 0xcb, 0x42, 0x2a, 0x71, 0xf7, 0xd2, 0xda, 0x1a, 0x18, 0xc3, 0x8e, 0x57, 0x48, 0xce, 0x1f,
	0x06, 0x58, 0xab, 0x1c, 0xa7, 0x2c, 0xa1, 0xb3, 0x00, 0x37, 0x4b, 0xf3, 0x18, 0xfa, 0x99, 0xe4,
	0x4f, 0xc3, 0x9f, 0x50, 0x26, 0x24, 0xd3, 0x5d, 0xc3, 0xc9, 0x27, 0xb0, 0x57, 0x60, 0xa3, 0xc5,
	0x22, 0xf1, 0x27, 0xf1, 0x6d, 0x52, 0x56, 0xc0, 0xb3, 0x69, 0x56, 0xfe, 0xe7, 0x62, 0xfe, 0x34,
	0xa0, 0xb7, 0x2a, 0xc6, 0xc3, 0x74, 0xb1, 0x7c, 0xba, 0x06, 0x3f, 0xcd, 0x2f, 0x45, 0xff, 0xfc,
	0x87, 0x3c, 0xa4, 0x38, 0x2f, 0x6b, 0xd0, 0x71, 0xce, 0x0d, 0x74, 0xae, 0x29, 0xb9, 0x3a, 0x4e,
	0x3e, 0x86, 0x5d, 0xb5, 0x07, 0x25, 0x5d, 0x96, 0xd1, 0xa4, 0x22, 0x7d, 0x30, 0xa3, 0x2c, 0x28,
	0x0a, 0xe2, 0x9f, 0xce, 0xcf, 0x06, 0xf4, 0xaf, 0x73, 0xa4, 0xcb, 0x1b, 0x8a, 0xf8, 0xf6, 0x93,
	0x73, 0x08, 0x9d, 0x07, 0xe1, 0x8d, 0x2b, 0x65, 0xde, 0x2b, 0x80, 0xcf, 0x15, 0xa3, 0x88, 0x5f,
	0x24, 0x34, 0x9a, 0xb1, 0x22, 0x4f, 0x05, 0x71, 0xe6, 0xf0, 0x5a, 0xc9, 0x85, 0x37, 0xd6, 0x86,
	0xf6, 0x7d, 0x96, 0xc4, 0x1c, 0x10, 0x89, 0x74, 0xbc, 0x4a, 0xe6, 0x3a, 0x31, 0x93, 0x97, 0x79,
	0x54, 0xe6, 0x51, 0xca, 0x5c, 0x97, 0xe1, 0x02, 0x7d, 0x26, 0xda, 0xc7, 0xe7, 0xb7, 0x92, 0x9d,
	0x4f, 0x61, 0x5f, 0x44, 0xb9, 0x92, 0x15, 0x79, 0x98, 0x6d, 0x54, 0xb7, 0xf3, 0xab, 0x09, 0x6f,
	0xd6, 0x0c, 0x9f, 0xd3, 0xdf, 0x3f, 0x82, 0x6e, 0x15, 0x91, 0xd2, 0xd9, 0xd2, 0xda, 0x12, 0x9d,
	0xa9, 0x83, 0x64, 0x00, 0x3b, 0x25, 0x30, 0x65, 0xd4, 0x6a, 0x89, 0xae, 0xab, 0x10, 0xf7, 0x13,
	0xd4, 0xfc, 0x6c, 0x4b, 0x3f, 0x81, 0xee, 0x27, 0x50, 0xfc, 0xb4, 0xa5, 0x1f, 0x05, 0x52, 0x76,
	0xbb, 0x5a, 0x49, 0xab, 0x23, 0x68, 0x6b, 0x38, 0xef, 0xb1, 0x4f, 0x71, 0xc6, 0x70, 0x3e, 0x62,
	0x16, 0x08, 0xd2, 0x0a, 0xe0, 0xda, 0x3c, 0x9d, 0x17, 0xda, 0x1d, 0xa9, 0xad, 0x00, 0xe7, 0x77,
	0x03, 0x2c, 0xed, 0xc7, 0x7d, 0x13, 0x32, 0x7c, 0x56, 0x3f, 0xcf, 0x09, 0xa1, 0x73, 0x1d, 0x6d,
	0xb6, 0xa0, 0x0e, 0xbc, 0x8a, 0x8a, 0x0b, 0x43, 0x59, 0xd2, 0x1a, 0xc6, 0x17, 0x84, 0x2d, 0x53,
	0x14, 0x3d, 0x97, 0xc7, 0x63, 0x25, 0x3b, 0xbf, 0xbd, 0x84, 0x6d, 0x1e, 0xeb, 0xe9, 0xf6, 0x6c,
	0x12, 0xe9, 0x18, 0xfa, 0x17, 0x8a, 0xac, 0x44, 0x5c, 0xc3, 0xc9, 0x10, 0x7a, 0x6e, 0x9a, 0x8f,
	0xa2, 0x24, 0x8f, 0xd9, 0x24, 0x3e, 0x9f, 0x2d, 0xb3, 0xa2, 0x25, 0x3a, 0xcc, 0x99, 0x63, 0x8d,
	0xb9, 0x25, 0x99, 0x1a, 0xcc, 0x5b, 0x5d, 0xdc, 0x38, 0x35, 0x76, 0x4b, 0xb6, 0xba, 0x41, 0xc5,
	0x33, 0x56, 0xc2, 0x7d, 0x99, 0xe4, 0x34, 0xb3, 0xb6, 0xe5, 0x8f, 0xd4, 0x71, 0xce, 0x1d, 0xeb,
	0xdc, 0xb6, 0xe4, 0xea, 0x38, 0x39, 0x85, 0x37, 0x5a, 0x38, 0xc9, 0xef, 0x08, 0x7e, 0xa3, 0x8e,
	0x67, 0xef, 0xca, 0xe1, 0x29, 0x9b, 0xf5, 0x55, 0x96, 0xc4, 0xc5, 0x06, 0x34, 0xa9, 0xb8, 0xc5,
	0xb8, 0xc1, 0x42, 0x6e, 0x45, 0x93, 0x4a, 0xe9, 0x50, 0xcd, 0xe2, 0x95, 0xb4, 0x68, 0x50, 0xf1,
	0xa9, 0x70, 0xab, 0x6d, 0xec, 0xca, 0x7d, 0xab, 0x00, 0xe7, 0x0c, 0xba, 0x1e, 0x06, 0x6e, 0xc4,
	0xca, 0x71, 0xd5, 0xc7, 0xc4, 0x58, 0x1f, 0x13, 0xe7, 0x43, 0xd8, 0x29, 0x8d, 0xf8, 0xdc, 0x15,
	0x37, 0x95, 0x51, 0xdd, 0x54, 0xa7, 0x7f, 0x99, 0xf0, 0xae, 0xf2, 0x88, 0x40, 0xfa, 0x63, 0xe8,
	0x23, 0xf1, 0xe0, 0x75, 0xfd, 0xf5, 0x43, 0x3e, 0x3a, 0x59, 0xbd, 0x8e, 0x4e, 0x1a, 0x5f, 0x46,
	0xf6, 0x41, 0x33, 0x45, 0x44, 0x76, 0x5e, 0x90, 0x6f, 0x6b, 0x81, 0x64, 0xf9, 0xe4, 0xa8, 0xd9,
	0xa6, 0xfe, 0x98, 0x79, 0xca, 0xf3, 0xd7, 0xd0, 0x15, 0x07, 0x11, 0x4f, 0x46, 0xdc, 0x61, 0x87,
	0x2a, 0x5f, 0xbf, 0x87, 0x6d, 0xfb, 0x5f, 0xb4, 0xd2, 0xd9, 0x77, 0xd0, 0xd3, 0x4e, 0x35, 0xe2,
	0xac, 0x19, 0xac, 0x5d, 0x72, 0xf6, 0xe0, 0x51, 0x8e, 0x74, 0x3d, 0x83, 0xdd, 0x86, 0x03, 0x73,
	0x23, 0xf7, 0x47, 0x8f, 0x70, 0xaa, 0x53, 0xd7, 0x79, 0x71, 0xfa, 0xb7, 0x01, 0xbd, 0x72, 0xa6,
	0xca, 0x9f, 0xf9, 0x59, 0xd1, 0x9e, 0x12, 0x27, 0x7b, 0x35, 0x67, 0xe5, 0xf1, 0x67, 0xef, 0xea,
	0xb0, 0xcc, 0xfa, 0x73, 0xe8, 0xb9, 0x49, 0x94, 0xe6, 0x0c, 0xff, 0xa7, 0x83, 0x2b, 0xb0, 0x3c,
	0x0c, 0xc2, 0x8c, 0x21, 0x75, 0x69, 0x12, 0x57, 0xc7, 0xd3, 0x2c, 0xfb, 0x81, 0xbc, 0xaf, 0x9a,
	0xd4, 0xc6, 0xdb, 0x7e, 0xaf, 0x49, 0x25, 0x3c, 0x7e, 0xdf, 0x12, 0x0f, 0xf6, 0xb3, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x30, 0xad, 0xad, 0x77, 0xcf, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchedulingServiceClient is the client API for SchedulingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulingServiceClient interface {
	// Scheduling Resource
	SchedulingCGpu(ctx context.Context, in *SchedulingCGpuRequest, opts ...grpc.CallOption) (*SchedulingReply, error)
	SchedulingStorage(ctx context.Context, in *SchedulingStorageRequest, opts ...grpc.CallOption) (*SchedulingReply, error)
	// Query Resource Tree
	QueryCGpuTree(ctx context.Context, in *QueryTreeRequest, opts ...grpc.CallOption) (*QueryTreeReply, error)
	// Query Project Resource
	QueryProjectRes(ctx context.Context, in *QueryProjectResRequest, opts ...grpc.CallOption) (*QueryProjectResReply, error)
	QueryProjectResLite(ctx context.Context, in *QueryProjectResRequest, opts ...grpc.CallOption) (*QueryProjectResLiteReply, error)
}

type schedulingServiceClient struct {
	cc *grpc.ClientConn
}

func NewSchedulingServiceClient(cc *grpc.ClientConn) SchedulingServiceClient {
	return &schedulingServiceClient{cc}
}

func (c *schedulingServiceClient) SchedulingCGpu(ctx context.Context, in *SchedulingCGpuRequest, opts ...grpc.CallOption) (*SchedulingReply, error) {
	out := new(SchedulingReply)
	err := c.cc.Invoke(ctx, "/grpcSchMet.SchedulingService/SchedulingCGpu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) SchedulingStorage(ctx context.Context, in *SchedulingStorageRequest, opts ...grpc.CallOption) (*SchedulingReply, error) {
	out := new(SchedulingReply)
	err := c.cc.Invoke(ctx, "/grpcSchMet.SchedulingService/SchedulingStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) QueryCGpuTree(ctx context.Context, in *QueryTreeRequest, opts ...grpc.CallOption) (*QueryTreeReply, error) {
	out := new(QueryTreeReply)
	err := c.cc.Invoke(ctx, "/grpcSchMet.SchedulingService/QueryCGpuTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) QueryProjectRes(ctx context.Context, in *QueryProjectResRequest, opts ...grpc.CallOption) (*QueryProjectResReply, error) {
	out := new(QueryProjectResReply)
	err := c.cc.Invoke(ctx, "/grpcSchMet.SchedulingService/QueryProjectRes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) QueryProjectResLite(ctx context.Context, in *QueryProjectResRequest, opts ...grpc.CallOption) (*QueryProjectResLiteReply, error) {
	out := new(QueryProjectResLiteReply)
	err := c.cc.Invoke(ctx, "/grpcSchMet.SchedulingService/QueryProjectResLite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulingServiceServer is the server API for SchedulingService service.
type SchedulingServiceServer interface {
	// Scheduling Resource
	SchedulingCGpu(context.Context, *SchedulingCGpuRequest) (*SchedulingReply, error)
	SchedulingStorage(context.Context, *SchedulingStorageRequest) (*SchedulingReply, error)
	// Query Resource Tree
	QueryCGpuTree(context.Context, *QueryTreeRequest) (*QueryTreeReply, error)
	// Query Project Resource
	QueryProjectRes(context.Context, *QueryProjectResRequest) (*QueryProjectResReply, error)
	QueryProjectResLite(context.Context, *QueryProjectResRequest) (*QueryProjectResLiteReply, error)
}

// UnimplementedSchedulingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulingServiceServer struct {
}

func (*UnimplementedSchedulingServiceServer) SchedulingCGpu(ctx context.Context, req *SchedulingCGpuRequest) (*SchedulingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulingCGpu not implemented")
}
func (*UnimplementedSchedulingServiceServer) SchedulingStorage(ctx context.Context, req *SchedulingStorageRequest) (*SchedulingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulingStorage not implemented")
}
func (*UnimplementedSchedulingServiceServer) QueryCGpuTree(ctx context.Context, req *QueryTreeRequest) (*QueryTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCGpuTree not implemented")
}
func (*UnimplementedSchedulingServiceServer) QueryProjectRes(ctx context.Context, req *QueryProjectResRequest) (*QueryProjectResReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProjectRes not implemented")
}
func (*UnimplementedSchedulingServiceServer) QueryProjectResLite(ctx context.Context, req *QueryProjectResRequest) (*QueryProjectResLiteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProjectResLite not implemented")
}

func RegisterSchedulingServiceServer(s *grpc.Server, srv SchedulingServiceServer) {
	s.RegisterService(&_SchedulingService_serviceDesc, srv)
}

func _SchedulingService_SchedulingCGpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulingCGpuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).SchedulingCGpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcSchMet.SchedulingService/SchedulingCGpu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).SchedulingCGpu(ctx, req.(*SchedulingCGpuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_SchedulingStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulingStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).SchedulingStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcSchMet.SchedulingService/SchedulingStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).SchedulingStorage(ctx, req.(*SchedulingStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_QueryCGpuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).QueryCGpuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcSchMet.SchedulingService/QueryCGpuTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).QueryCGpuTree(ctx, req.(*QueryTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_QueryProjectRes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectResRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).QueryProjectRes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcSchMet.SchedulingService/QueryProjectRes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).QueryProjectRes(ctx, req.(*QueryProjectResRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_QueryProjectResLite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectResRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).QueryProjectResLite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcSchMet.SchedulingService/QueryProjectResLite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).QueryProjectResLite(ctx, req.(*QueryProjectResRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchedulingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcSchMet.SchedulingService",
	HandlerType: (*SchedulingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SchedulingCGpu",
			Handler:    _SchedulingService_SchedulingCGpu_Handler,
		},
		{
			MethodName: "SchedulingStorage",
			Handler:    _SchedulingService_SchedulingStorage_Handler,
		},
		{
			MethodName: "QueryCGpuTree",
			Handler:    _SchedulingService_QueryCGpuTree_Handler,
		},
		{
			MethodName: "QueryProjectRes",
			Handler:    _SchedulingService_QueryProjectRes_Handler,
		},
		{
			MethodName: "QueryProjectResLite",
			Handler:    _SchedulingService_QueryProjectResLite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedulingAndMetering.proto",
}

// MeteringServiceClient is the client API for MeteringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MeteringServiceClient interface {
	// Query Metering
	QueryMetering(ctx context.Context, in *QmRequest, opts ...grpc.CallOption) (*QmReply, error)
	ComputeMetering(ctx context.Context, in *QmRequest, opts ...grpc.CallOption) (*QmReply, error)
	// Register Cron Metering Task
	RegisterCronMeteringTask(ctx context.Context, in *RegCmtRequest, opts ...grpc.CallOption) (*RegCmtReply, error)
}

type meteringServiceClient struct {
	cc *grpc.ClientConn
}

func NewMeteringServiceClient(cc *grpc.ClientConn) MeteringServiceClient {
	return &meteringServiceClient{cc}
}

func (c *meteringServiceClient) QueryMetering(ctx context.Context, in *QmRequest, opts ...grpc.CallOption) (*QmReply, error) {
	out := new(QmReply)
	err := c.cc.Invoke(ctx, "/grpcSchMet.MeteringService/QueryMetering", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) ComputeMetering(ctx context.Context, in *QmRequest, opts ...grpc.CallOption) (*QmReply, error) {
	out := new(QmReply)
	err := c.cc.Invoke(ctx, "/grpcSchMet.MeteringService/ComputeMetering", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) RegisterCronMeteringTask(ctx context.Context, in *RegCmtRequest, opts ...grpc.CallOption) (*RegCmtReply, error) {
	out := new(RegCmtReply)
	err := c.cc.Invoke(ctx, "/grpcSchMet.MeteringService/RegisterCronMeteringTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeteringServiceServer is the server API for MeteringService service.
type MeteringServiceServer interface {
	// Query Metering
	QueryMetering(context.Context, *QmRequest) (*QmReply, error)
	ComputeMetering(context.Context, *QmRequest) (*QmReply, error)
	// Register Cron Metering Task
	RegisterCronMeteringTask(context.Context, *RegCmtRequest) (*RegCmtReply, error)
}

// UnimplementedMeteringServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMeteringServiceServer struct {
}

func (*UnimplementedMeteringServiceServer) QueryMetering(ctx context.Context, req *QmRequest) (*QmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMetering not implemented")
}
func (*UnimplementedMeteringServiceServer) ComputeMetering(ctx context.Context, req *QmRequest) (*QmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeMetering not implemented")
}
func (*UnimplementedMeteringServiceServer) RegisterCronMeteringTask(ctx context.Context, req *RegCmtRequest) (*RegCmtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCronMeteringTask not implemented")
}

func RegisterMeteringServiceServer(s *grpc.Server, srv MeteringServiceServer) {
	s.RegisterService(&_MeteringService_serviceDesc, srv)
}

func _MeteringService_QueryMetering_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).QueryMetering(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcSchMet.MeteringService/QueryMetering",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).QueryMetering(ctx, req.(*QmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_ComputeMetering_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).ComputeMetering(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcSchMet.MeteringService/ComputeMetering",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).ComputeMetering(ctx, req.(*QmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_RegisterCronMeteringTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegCmtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).RegisterCronMeteringTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcSchMet.MeteringService/RegisterCronMeteringTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).RegisterCronMeteringTask(ctx, req.(*RegCmtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeteringService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcSchMet.MeteringService",
	HandlerType: (*MeteringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryMetering",
			Handler:    _MeteringService_QueryMetering_Handler,
		},
		{
			MethodName: "ComputeMetering",
			Handler:    _MeteringService_ComputeMetering_Handler,
		},
		{
			MethodName: "RegisterCronMeteringTask",
			Handler:    _MeteringService_RegisterCronMeteringTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedulingAndMetering.proto",
}
